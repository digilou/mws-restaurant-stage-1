"use strict";var _createClass=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var DBHelper=function(){function t(){_classCallCheck(this,t)}return _createClass(t,null,[{key:"pingServer",value:function(e){return console.log("pingServer server: "+e),fetch(e).then(function(e){if(e.ok)return!0}).catch(function(e){return console.log("Error while pinging server: ",e),!1})}},{key:"fetchRestaurants",value:function(r){var e=this;fetch(""+this.RESTAURANTS_URL).then(function(e){return e.json()}).then(function(n){e.openDb.then(function(e){var t=e.transaction("restaurants","readwrite").objectStore("restaurants");return n.forEach(function(e){return t.put(e)}),r(null,n),t.complete})}).catch(function(e){console.log("Request failed: "+e),r(e,null)})}},{key:"fetchRestaurantById",value:function(r,o){this.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.find(function(e){return e.id==r});n?o(null,n):o("Restaurant does not exist",null)}})}},{key:"fetchRestaurantByCuisine",value:function(r,o){this.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.cuisine_type==r});o(null,n)}})}},{key:"fetchRestaurantByNeighborhood",value:function(r,o){this.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.neighborhood==r});o(null,n)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,o,i){this.fetchRestaurants(function(e,t){if(e)i(e,null);else{var n=t;"all"!=r&&(n=n.filter(function(e){return e.cuisine_type==r})),"all"!=o&&(n=n.filter(function(e){return e.neighborhood==o})),i(null,n)}})}},{key:"fetchNeighborhoods",value:function(o){this.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].neighborhood}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"fetchCuisines",value:function(o){this.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].cuisine_type}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){return"/img/"+e.id+".jpg"}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:this.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"fetchReviewsByRestaurantId",value:function(){this.pingServer(this.REVIEWS_URL)?(console.log("Server online."),this.fetchReviewsFromServer(),console.log("Fetched from server.")):(console.log("Server offline."),this.fetchReviewsFromDB(fillReviewsHTML),console.log("Fetched from cached data."))}},{key:"fetchReviewsFromServer",value:function(){var e=this;fetch(t.REVIEWS_URL+"/?restaurant_id="+Number(getParameterByName("id"))).then(function(e){if(e.ok)return e.json()}).then(function(n){e.openDb.then(function(e){var t=e.transaction("reviews","readwrite").objectStore("reviews");return n.forEach(function(e){return t.put(e)}),t.complete}).then(fillReviewsHTML(n))})}},{key:"fetchReviewsFromDB",value:function(r){this.openDb.then(function(e){var t=e.transaction("reviews","readonly").objectStore("reviews"),n=e.transaction("reviewQueue","readonly").objectStore("reviewQueue");Promise.all(t.getAll()+n.getAll());return r&&0<r.length&&reviewsStore.getAll().then(function(e){fillReviewsHTML(e)}),t.complete})}},{key:"addReviewToQueue",value:function(n){this.openDb.then(function(e){var t=e.transaction("reviewQueue","readwrite").objectStore("reviewQueue");return Array.isArray(n)?n.forEach(function(e){t.put(e),console.log("more reviews stored")}):(t.put(n),console.log("one review stored")),t.complete}).then(fillReviewsHTML(n)).then(console.log("You're offline. Reviews queued!"))}},{key:"postFromReviewQueue",value:function(){var n=this;this.openDb.then(function(e){var t=e.transaction("reviewQueue","readwrite").objectStore("reviewQueue");t.getAll().then(function(e){Array.isArray(e)?e.forEach(function(e){n.postToServer(e)}):n.postToServer(offlineReview)}).then(function(e){t.clear(e)})})}},{key:"storeInIDB",value:function(){var e=this;fetch(this.REVIEWS_URL+"/?restaurant_id="+getParameterByName("id")).then(function(e){return e.json()}).then(function(n){e.openDb.then(function(e){var t=e.transaction("reviews","readwrite").objectStore("reviews");return n.forEach(function(e){return t.put(e)}),t.complete})}).then(function(){return console.log("Reviews updated in IDB!")}).catch(function(e){return console.log(e)})}},{key:"postToServer",value:function(e){return fetch(this.REVIEWS_URL,{method:"POST",headers:{"Content-Type":"application/json; charset=utf-8"},body:JSON.stringify(e),credentials:"same-origin"}).then(function(e){if(e.ok)return e.json()}).then(this.storeInIDB(e)).then(location.reload(!0)).catch(function(e){return e})}},{key:"changeToggleStateOnServer",value:function(e){fetch(this.RESTAURANTS_URL+"/"+getParameterByName("id")+"/?is_favorite="+e,{method:"POST",headers:{"Content-Type":"application/json; charset=utf-8"},body:JSON.stringify(e),credentials:"same-origin",mode:"no-cors"}).then(function(e){if(e.ok)return e.json()}).catch(function(e){return e})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337"}},{key:"RESTAURANTS_URL",get:function(){return this.DATABASE_URL+"/restaurants"}},{key:"REVIEWS_URL",get:function(){return this.DATABASE_URL+"/reviews"}},{key:"openDb",get:function(){return idb.open("rr-db",3,function(e){switch(e.oldVersion){case 0:var t=e.createObjectStore("restaurants",{keyPath:"id"});t.createIndex("cuisine","cuisine_type"),t.createIndex("neighborhood","neighborhood");case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant","restaurant_id");case 2:e.createObjectStore("reviewQueue",{autoIncrement:!0})}})}}]),t}();!function(){function a(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function i(n,r,o){var i=void 0,e=new Promise(function(e,t){a(i=n[r].apply(n,o)).then(e,t)});return e.request=i,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return i(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=i(e,n,arguments)).then(function(e){if(e)return new u(e,t.request)});var e,t})})}function o(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function c(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new c(n)}function f(e){this._db=e}e(o,"_index",["name","keyPath","multiEntry","unique"]),t(o,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(o,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(u,"_cursor",["direction","key","primaryKey","value"]),t(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(u.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),a(t._request).then(function(e){if(e)return new u(e,t._request)})})})}),s.prototype.createIndex=function(){return new o(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new o(this._store.index.apply(this._store,arguments))},e(s,"_store",["name","keyPath","indexNames","autoIncrement"]),t(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},e(c,"_tx",["objectStoreNames","mode"]),n(c,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(i){[s,o].forEach(function(e){i in e.prototype&&(e.prototype[i.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,o=r[i].apply(r,t.slice(0,-1));o.onsuccess=function(){n(o.result)}})})}),[o,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,o=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(o.push(e.value),void 0===n||o.length!=n?e.continue():t(o)):t(o)})})})});var d={open:function(e,t,n){var r=i(indexedDB,"open",[e,t]),o=r.request;return o&&(o.onupgradeneeded=function(e){n&&n(new l(o.result,e.oldVersion,o.transaction))}),r.then(function(e){return new f(e)})},delete:function(e){return i(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=d,module.exports.default=module.exports):self.idb=d}();var restaurants=void 0,neighborhoods=void 0,cuisines=void 0,map=void 0,markers=[];document.addEventListener("DOMContentLoaded",function(e){fetchNeighborhoods(),fetchCuisines(),DBHelper.pingServer(DBHelper.REVIEWS_URL)?DBHelper.postFromReviewQueue():console.log("Offline")}),fetchNeighborhoods=function(){DBHelper.fetchNeighborhoods(function(e,t){e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})},fillNeighborhoodsHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.neighborhoods,n=document.getElementById("neighborhoods-select");e.forEach(function(e){var t=document.createElement("option");t.innerHTML=e,t.value=e,n.append(t)})},fetchCuisines=function(){DBHelper.fetchCuisines(function(e,t){e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})},fillCuisinesHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.cuisines,n=document.getElementById("cuisines-select");e.forEach(function(e){var t=document.createElement("option");t.innerHTML=e,t.value=e,n.append(t)})},window.initMap=function(){self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()},updateRestaurants=function(){var e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,o=e[n].value,i=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(o,i,function(e,t){e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})},resetRestaurants=function(e){self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(function(e){return null}),self.markers=[],self.restaurants=e},fillRestaurantsHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants,t=document.getElementById("restaurants-list");e.forEach(function(e){t.append(createRestaurantHTML(e))}),addMarkersToMap()},createRestaurantHTML=function(e){var t=document.createElement("li"),n=document.createElement("img");n.className="restaurant-img",n.src=DBHelper.imageUrlForRestaurant(e),n.setAttribute("alt",e.name),t.append(n);var r=document.createElement("h2");r.innerHTML=e.name,t.append(r);var o=document.createElement("p");o.innerHTML=e.neighborhood,t.append(o);var i=document.createElement("p");i.innerHTML=e.address,t.append(i);var a=document.createElement("a");return a.innerHTML="View Details &raquo;",a.href=DBHelper.urlForRestaurant(e),t.append(a),t},addMarkersToMap=function(){(0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants).forEach(function(e){var t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",function(){window.location.href=t.url}),self.markers.push(t)})},"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js",{scope:"/"}).then(function(e){console.log("Successful: "+e.scope)}).catch(function(e){console.log("Error: "+e)});var restaurant=void 0,reviewForm=(map=void 0,document.forms[0]),heart=document.getElementById("svg-heart");function addReview(e){e.preventDefault();var t=reviewForm.name.value,n=document.querySelector("#review-radios input[type=radio]:checked").value,r=reviewForm.comments.value,o={restaurant_id:Number(getParameterByName("id")),name:t,rating:Number(n),comments:r,createdAt:Number(new Date),updatedAt:Number(new Date)};DBHelper.addReviewToQueue(o),reviewForm.reset()}function toggleFavorite(){var e=document.getElementById("heart-toggle");e.checked?heart.style.fill="red":heart.style.fill="#eee",e.checked?DBHelper.changeToggleStateOnServer(!0):DBHelper.changeToggleStateOnServer(!1)}function checkFave(){fetch(""+DBHelper.RESTAURANTS_URL).then(function(){"true"==self.restaurant.is_favorite?heart.style.fill="red":heart.style.fill="#eee"})}document.addEventListener("DOMContentLoaded",function(){DBHelper.pingServer(DBHelper.REVIEWS_URL)?DBHelper.postFromReviewQueue():console.log("Offline")},!1),window.initMap=function(){fetchRestaurantFromURL(function(e,t){e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(self.restaurant),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})},fetchRestaurantFromURL=function(n){if(self.restaurant)n(null,self.restaurant);else{var e=getParameterByName("id");e?(DBHelper.fetchRestaurantById(e,function(e,t){(self.restaurant=t)?(fillRestaurantHTML(),n(null,t)):console.error(e)}),DBHelper.fetchReviewsByRestaurantId(e,function(e,t){t?(console.log("Fetched reviews: ",t.length),fillReviewsHTML(t),n(null,t)):console.error(e)})):(error="No restaurant id in URL",n(error,null))}},fillRestaurantHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant;document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;var t=document.getElementById("restaurant-img");t.className="restaurant-img",t.src=DBHelper.imageUrlForRestaurant(e),t.setAttribute("alt",e.name),document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML()},fillRestaurantHoursHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.operating_hours,t=document.getElementById("restaurant-hours");for(var n in e){var r=document.createElement("tr"),o=document.createElement("td");o.innerHTML=n,r.appendChild(o);var i=document.createElement("td");i.innerHTML=e[n],r.appendChild(i),t.appendChild(r)}},fillReviewsHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.reviews,t=document.getElementById("reviews-container"),n=document.createElement("h3");if(n.innerHTML="Reviews",t.appendChild(n),!e){var r=document.createElement("p");return r.innerHTML="No reviews yet. Be the first!",void t.appendChild(r)}var o=document.getElementById("reviews-list");Array.isArray(e)?e.forEach(function(e){o.appendChild(createReviewHTML(e))}):o.appendChild(createReviewHTML(e)),t.appendChild(o)},createReviewHTML=function(e){var t=document.createElement("li"),n=document.createElement("p");n.innerHTML=e.name,t.appendChild(n);var r=document.createElement("p"),o=new Date(e.createdAt);r.innerHTML=o.toLocaleString("en-US",{year:"numeric",month:"long",day:"numeric",hour12:!1}),t.appendChild(r);var i=document.createElement("p");i.innerHTML="Rating: "+e.rating+" stars",t.appendChild(i);var a=document.createElement("p");return a.innerHTML=e.comments,t.appendChild(a),t},fillBreadcrumb=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,t=document.getElementById("breadcrumb"),n=document.createElement("li");n.setAttribute("aria-current","page"),n.innerHTML=e.name,t.appendChild(n)},getParameterByName=function(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null},reviewForm.addEventListener("submit",addReview,!1),heart.addEventListener("click",toggleFavorite),addEventListener("load",checkFave,!1);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
